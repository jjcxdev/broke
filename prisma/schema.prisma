// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Household {
    id        Int      @id @default(autoincrement())
    name      String
    adminId   String
    admin     User     @relation(fields: [adminId], references: [id])
    events    Event[] // Back-reference
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    households    Household[] // Back-reference
    color         String? // new field
}

model Event {
    id              Int          @id @default(autoincrement())
    householdId     Int
    household       Household    @relation(fields: [householdId], references: [id])
    date            DateTime
    payee           String?
    amount          Float?
    isRecurring     Boolean?
    isPreAuthorized Boolean?
    startDate       DateTime?
    endDate         DateTime?
    recurrence      Recurrence[]
}

model Recurrence {
    id        Int       @id @default(autoincrement())
    frequency Frequency // using an enum
    eventId   Int // Foreign key
    event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade) // Connect Resource model to Event Model
}

enum Frequency {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
